{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAaeA,G,YAVF,SAACC,GACV,OAEA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCCXC,EAPE,SAACR,GACd,OAAS,qBAAKC,UAAU,YAAf,SAA4BD,EAAMS,SAASC,KAAI,SAACP,GAAD,OACpD,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCOZO,G,YATG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OAAQ,uBACNC,KAAK,SACLb,UAAU,SACVW,YAAaA,EACbG,SAAUF,MC+BCG,E,kDAhCb,aAAe,IAAD,8BACZ,gBAYFC,eAAiB,SAAAC,GAAU,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAXnE,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJH,E,gEAOO,IAAD,OAClBI,MAAM,8CAA8CC,MAAK,SAACC,GAAD,OACvDA,EAASC,OAAOF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEV,SAAUmB,Y,+BAMpD,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAmBrB,EAASsB,QAAO,SAAC5B,GAAD,OACvCA,EAAQG,KAAK0B,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK/B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEW,YAAa,kBACbC,aAAcgB,KAAKZ,iBAErB,cAAC,EAAD,CAAUR,SAAUqB,W,GA5BVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.89136e83.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nconst Card = (props) => {\r\n    return ( \r\n    \r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div> );\r\n}\r\n \r\nexport default Card;","import React from 'react';\r\nimport Card from '../card/card';\r\n\r\nconst CardList = (props) => {\r\n    return ( <div className='card-list'>{props.monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster}/>\r\n          ))}</div> );\r\n}\r\n \r\n \r\nexport default CardList;\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n  return (<input\r\n    type=\"search\"\r\n    className=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />);\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport CardList from \"./components/card-list/card-list\";\r\nimport \"./components/card-list/card-list.styles.css\";\r\nimport SearchBox from \"./components/search-box/search-box\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then((response) =>\r\n      response.json().then((users) => this.setState({ monsters: users }))\r\n    );\r\n  }\r\n\r\n  onSearchChange = event => {this.setState({ searchField: event.target.value })};\r\n\r\n  render() {\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonsters = monsters.filter((monster) =>\r\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monster Rolodex</h1>\r\n        <SearchBox\r\n          placeholder={\"Search Monsters\"}\r\n          handleChange={this.onSearchChange}\r\n        />\r\n        <CardList monsters={filteredMonsters}></CardList>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}